---
import type { CollectionEntry } from 'astro:content';

import Comments from '@components/Comments';
import Datetime from '@components/Datetime';
import Footer from '@components/Footer.astro';
import Header from '@components/Header.astro';
import ShareLinks from '@components/ShareLinks.astro';
import Tag from '@components/Tag.astro';
import { SITE } from '@config';
import Layout from '@layouts/Layout.astro';
import { slugifyStr } from '@utils/slugify';

export interface Props {
    post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;

const {
    title,
    author,
    description,
    ogImage,
    canonicalURL,
    pubDatetime,
    modDatetime,
    readingTime,
    tags,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === 'string' ? ogImage : ogImage?.src;
const ogUrl = new URL(ogImageUrl ?? `/posts/${slugifyStr(title)}.png`, Astro.url.origin).href;

const layoutProps = {
    title: `${title} | ${SITE.title}`,
    author,
    description,
    pubDatetime,
    modDatetime,
    canonicalURL,
    ogImage: ogUrl,
    scrollSmooth: true,
};
---

<Layout {...layoutProps}>
    <Header />

    <!-- <div class="progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill">
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div> -->

    <!-- <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
        <button
            class="focus-outline mb-2 mt-8 flex hover:opacity-75"
            onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
        >
            <svg xmlns="http://www.w3.org/2000/svg"
                ><path d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
                ></path>
            </svg><span>返回</span>
        </button>
    </div> -->
    <main id="main-content" class="pt-8">
        <h1 transition:name={slugifyStr(title)} class="post-title text-center">{title}</h1>
        <Datetime
            className="my-2 justify-center"
            pubDatetime={pubDatetime}
            readingTime={readingTime}
            size="lg"
        />
        <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
            <Content />
        </article>

        <ul class="my-8">
            {tags.map((tag) => <Tag tag={slugifyStr(tag)} />)}
        </ul>

        <div
            class="mb-16 flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
        >
            <button id="back-to-top" class="focus-outline whitespace-nowrap py-1 hover:opacity-75">
                <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
                    <path d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
                    ></path>
                </svg>
                <span>回到顶部</span>
            </button>

            <ShareLinks />
        </div>
        <Comments client:only="react" />
    </main>
    <Footer />
</Layout>

<style>
    main {
        @apply mx-auto w-full max-w-3xl px-4 pb-12;
    }
    .post-title {
        @apply text-2xl font-semibold text-skin-accent;
    }
</style>

<script is:inline>
    /**
     * Create a progress indicator at the top
     */
    function createProgressBar() {
        // Create the main container div
        const progressContainer = document.createElement('div');
        progressContainer.className = 'progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill';

        // Create the progress bar div
        const progressBar = document.createElement('div');
        progressBar.className = 'progress-bar h-1 w-0 bg-skin-accent';
        progressBar.id = 'myBar';

        // Append the progress bar to the progress container
        progressContainer.append(progressBar);

        // Append the progress container to the document body or any other desired parent element
        document.body.append(progressContainer);
    }
    createProgressBar();

    /**
     * Update the progress bar when user scrolls
     */
    function updateScrollProgress() {
        const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
        const height =
            document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const scrolled = (winScroll / height) * 100;
        if (document) {
            const myBar = document.querySelector('#myBar');
            if (myBar) {
                myBar.style.width = `${scrolled}%`;
            }
        }
    }
    document.addEventListener('scroll', updateScrollProgress);

    /**
     * Attaches links to headings in the document, allowing sharing of sections easily
     */
    function addHeadingLinks() {
        const headings = Array.from(document.querySelectorAll('h2, h3, h4, h5, h6'));
        for (const heading of headings) {
            heading.classList.add('group');
            const link = document.createElement('a');
            link.textContent = '#';
            link.className = 'heading-link hidden group-hover:inline-block ml-2';
            link.href = `#${heading.id}`;
            link.ariaHidden = 'true';
            heading.append(link);
        }
    }
    addHeadingLinks();

    /**
     * Attaches copy buttons to code blocks in the document, allowing users to copy code easily.
     */
    function attachCopyButtons() {
        const copyButtonLabel = 'Copy';
        const codeBlocks = Array.from(document.querySelectorAll('pre'));

        const screenWidth = window.innerWidth;
        const isDesktop = screenWidth > 640;
        for (const codeBlock of codeBlocks) {
            const wrapper = document.createElement('div');
            wrapper.style.position = 'relative';

            const copyButton = document.createElement('button');
            copyButton.className =
                'transition-opacity copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium';
            if (isDesktop) {
                copyButton.classList.add('opacity-0');
            }
            copyButton.innerHTML = copyButtonLabel;
            codeBlock.setAttribute('tabindex', '0');
            codeBlock.append(copyButton);

            // hover to show copy button
            if (isDesktop) {
                codeBlock.addEventListener('pointerenter', () => {
                    copyButton.classList.remove('opacity-0');
                });
                codeBlock.addEventListener('pointerleave', () => {
                    copyButton.classList.add('opacity-0');
                });
            }

            // wrap codebock with relative parent element
            codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
            wrapper.append(codeBlock);

            copyButton.addEventListener('click', async () => {
                await copyCode(codeBlock, copyButton);
            });
        }

        async function copyCode(block, button) {
            const code = block.querySelector('code');
            const text = code?.textContent;

            await navigator.clipboard.writeText(text ?? '');

            // visual feedback that task is completed
            button.textContent = 'Copied';

            setTimeout(() => {
                button.textContent = copyButtonLabel;
            }, 700);
        }
    }
    attachCopyButtons();

    /**
     * Scrolls the document to the top when the "Back to Top" button is clicked.
     */
    function backToTop() {
        document.querySelector('#back-to-top')?.addEventListener('click', () => {
            document.body.scrollTop = 0; // For Safari
            document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
        });
    }
    backToTop();
</script>
