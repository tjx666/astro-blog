---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

import PostDetails from '@layouts/PostDetails.astro';
import Posts from '@layouts/Posts.astro';
import getPageNumbers from '@utils/getPageNumbers';
import getPagination from '@utils/getPagination';
import getPostsWithRT from '@utils/getPostsWithRT';
import getSortedPosts from '@utils/getSortedPosts';

export interface Props {
    post: CollectionEntry<'blog'>;
}

export async function getStaticPaths() {
    const posts = await getCollection('blog', ({ data }) => !data.draft);
    const postsWithRT = await getPostsWithRT(posts);

    const postResult = postsWithRT.map((post) => ({
        params: { slug: post.slug },
        props: { post },
    }));

    const pagePaths = getPageNumbers(posts.length).map((pageNum) => ({
        params: { slug: String(pageNum) },
    }));

    return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection('blog');

const sortedPosts = await getSortedPosts(posts);

const pagination = getPagination({
    posts: sortedPosts,
    page: slug,
});
---

{post ? <PostDetails post={post} /> : <Posts {...pagination} />}
