---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

import TagPosts from '@layouts/TagPosts.astro';
import getPageNumbers from '@utils/getPageNumbers';
import getPagination from '@utils/getPagination';
import getPostsByTag from '@utils/getPostsByTag';
import getUniqueTags from '@utils/getUniqueTags';

export interface Props {
    post: CollectionEntry<'blog'>;
    tag: string;
    tagName: string;
}

export async function getStaticPaths() {
    const posts = await getCollection('blog');

    const tags = getUniqueTags(posts);

    const promises = tags.map(async ({ tag, tagName }) => {
        const tagPosts = await getPostsByTag(posts, tag);
        const totalPages = getPageNumbers(tagPosts.length);

        return totalPages.map((page) => ({
            params: { tag, page },
            props: { tag, tagName },
        }));
    });
    return (await Promise.all(promises)).flat();
}

const { page } = Astro.params;
const { tag, tagName } = Astro.props;

const posts = await getCollection('blog', ({ data }) => !data.draft);

const postsByTag = await getPostsByTag(posts, tag);

const pagination = getPagination({
    posts: postsByTag,
    page,
});
---

<TagPosts {...pagination} {tag} {tagName} />
